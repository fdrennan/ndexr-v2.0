import type { FileDescriptor } from 'file-entry-cache';
import type { FileResult } from '../../util/fileHelper';
import type { CSpellLintResultCache } from './CSpellLintResultCache';
export declare type CachedFileResult = Omit<FileResult, 'fileInfo' | 'elapsedTimeMs'>;
/**
 * This is the data cached.
 * Property names are short to help keep the cache file size small.
 */
interface CachedData {
    /** results */
    r: CachedFileResult;
    /** dependencies */
    d: string[];
}
interface CSpellCachedMetaData {
    data?: CachedData;
}
export declare type CSpellCacheMeta = (FileDescriptor['meta'] & CSpellCachedMetaData) | undefined;
/**
 * Caches cspell results on disk
 */
export declare class DiskCache implements CSpellLintResultCache {
    private fileEntryCache;
    private changedDependencies;
    private knownDependencies;
    constructor(cacheFileLocation: string, useCheckSum: boolean);
    getCachedLintResults(filename: string): Promise<FileResult | undefined>;
    setCachedLintResults({ fileInfo, elapsedTimeMs: _, ...result }: FileResult, dependsUponFiles: string[]): void;
    reconcile(): void;
    private cacheDependencies;
    private checkDependencies;
}
export {};
//# sourceMappingURL=DiskCache.d.ts.map
import type { TextOffset } from '@cspell/cspell-types';
import { Sequence } from 'gensequence';
import { SpellingDictionary } from './SpellingDictionary/SpellingDictionary';
import * as TextRange from './util/TextRange';
export interface ValidationOptions extends IncludeExcludeOptions {
    maxNumberOfProblems?: number;
    maxDuplicateProblems?: number;
    minWordLength?: number;
    flagWords?: string[];
    allowCompoundWords?: boolean;
    /** ignore case when checking words against dictionary or ignore words list */
    ignoreCase: boolean;
}
export interface CheckOptions extends ValidationOptions {
    allowCompoundWords: boolean;
    ignoreCase: boolean;
}
export interface IncludeExcludeOptions {
    ignoreRegExpList?: (RegExp | string)[];
    includeRegExpList?: (RegExp | string)[];
}
export interface WordRangeAcc {
    textOffset: TextOffset;
    isIncluded: boolean;
    rangePos: number;
}
export interface ValidationResult extends TextOffset {
    line: TextOffset;
    isFlagged?: boolean;
    isFound?: boolean;
}
export declare const defaultMaxNumberOfProblems = 200;
export declare const defaultMaxDuplicateProblems = 5;
export declare const defaultMinWordLength = 4;
export declare const minWordSplitLen = 3;
export declare function validateText(text: string, dict: SpellingDictionary, options: ValidationOptions): Sequence<ValidationResult>;
export declare function calcTextInclusionRanges(text: string, options: IncludeExcludeOptions): TextRange.MatchRange[];
export declare function isWordValid(dict: SpellingDictionary, wo: TextOffset, line: TextOffset, options: HasWordOptions): boolean;
export interface HasWordOptions {
    ignoreCase: boolean;
    useCompounds: boolean | undefined;
}
export declare function hasWordCheck(dict: SpellingDictionary, word: string, options: HasWordOptions): boolean;
/**
 * Returns a mapper function that will
 * @param includeRanges Allowed ranges for words.
 */
declare function mapTextOffsetsAgainstRanges(includeRanges: TextRange.MatchRange[]): (wo: TextOffset) => Iterable<TextOffset>;
export declare const _testMethods: {
    mapWordsAgainstRanges: typeof mapTextOffsetsAgainstRanges;
};
export {};
//# sourceMappingURL=textValidator.d.ts.map